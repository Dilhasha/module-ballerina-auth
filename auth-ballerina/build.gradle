/*
 * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'java'
}

import org.apache.tools.ant.taskdefs.condition.Os

description = 'Ballerina - Auth Ballerina'

configurations {
    jbalTools
}

dependencies {
    jbalTools("org.ballerinalang:jballerina-tools:${ballerinaLangVersion}") {
        transitive = false
    }
    compile project(':auth-native')
}

clean {
    delete "$project.projectDir/target"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name, 'Implementation-Version': project.version)
    }
}

task unpackJballerinaTools(type: Copy) {
    configurations.jbalTools.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        from zipTree(artifact.getFile())
        into new File("${buildDir}/target/extracted-distributions", "jballerina-tools-zip")
    }
}

task unpackStdLibs() {
    doLast {
        configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from project.zipTree(artifact.getFile())
                into new File("${buildDir}/target/extracted-distributions", artifact.name + "-zip")
            }
        }
    }
}

task copyStdlibs(type: Copy) {
    def ballerinaDist = "build/target/extracted-distributions/jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}"
    into ballerinaDist

    /* Standard Libraries */
    configurations.ballerinaStdLibs.resolvedConfiguration.resolvedArtifacts.each { artifact ->
        def artifactExtractedPath = "${buildDir}/target/extracted-distributions/" + artifact.name + "-zip"
        into("repo/bala") {
            from "${artifactExtractedPath}/bala/"
        }
        into("repo/cache") {
            from "${artifactExtractedPath}/cache"
        }
    }
}

def packageName = "auth"
def packageOrg = "ballerina"
def ballerinaConfigFile = new File("$project.projectDir/Ballerina.toml")
def ballerinaDependencyFile = new File("$project.projectDir/Dependencies.toml")
def artifactBallerinaDocs = file("$project.projectDir/build/docs_parent/")
def artifactCacheParent = file("$project.projectDir/build/cache_parent/")
def artifactLibParent = file("$project.projectDir/build/lib_parent/")
def artifactCodeCoverageReport = file("$project.projectDir/target/cache/tests_cache/coverage/ballerina.exec")
def tomlVersion = project.version.split("-")[0]
def ballerinaCentralAccessToken = System.getenv('BALLERINA_CENTRAL_ACCESS_TOKEN')
def originalConfig = ballerinaConfigFile.text
def originalDependencyConfig = ballerinaDependencyFile.text
def distributionBinPath =  project.projectDir.absolutePath + "/build/target/extracted-distributions/" +
        "jballerina-tools-zip/jballerina-tools-${ballerinaLangVersion}/bin"

task updateTomlVersions {
    doLast {
        def stdlibDependentCacheVersion = project.stdlibCacheVersion.split("-")[0]
        def stdlibDependentCryptoVersion = project.stdlibCryptoVersion.split("-")[0]
        def stdlibDependentLogVersion = project.stdlibLogVersion.split("-")[0]
        def stdlibDependentRegexVersion = project.stdlibRegexVersion.split("-")[0]

        def newConfig = ballerinaConfigFile.text.replace("@project.version@", project.version)
        newConfig = newConfig.replace("@toml.version@", tomlVersion)
        ballerinaConfigFile.text = newConfig

        def newDependencyConfig = ballerinaDependencyFile.text.replace("@stdlib.cache.version@", stdlibDependentCacheVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.crypto.version@", stdlibDependentCryptoVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.log.version@", stdlibDependentLogVersion)
        newDependencyConfig = newDependencyConfig.replace("@stdlib.regex.version@", stdlibDependentRegexVersion)
        ballerinaDependencyFile.text = newDependencyConfig
    }
}

task revertTomlFile {
    doLast {
        ballerinaConfigFile.text = originalConfig
        ballerinaDependencyFile.text = originalDependencyConfig
    }
}

def groupParams = ""
def disableGroups = ""
def debugParams = ""
def balJavaDebugParam = ""

task initializeVariables {
    if (project.hasProperty("groups")) {
        groupParams = "--groups ${project.findProperty("groups")}"
    }
    if (project.hasProperty("disable")) {
        disableGroups = "--disable-groups ${project.findProperty("disable")}"
    }
    if (project.hasProperty("debug")) {
        debugParams = "--debug ${project.findProperty("debug")}"
    }
    if (project.hasProperty("balJavaDebug")) {
        balJavaDebugParam = "BAL_JAVA_DEBUG=${project.findProperty("balJavaDebug")}"
    }
}

task ballerinaTest {
    // Copy secret file to a separate directory since it is automatically deleted once read.
    copy {
        from file("$project.projectDir/tests/resources/datafiles/secret.txt")
        into file("$project.projectDir/tests/resources")
    }

    // Define config parameters used for Basic Auth authentication test cases.
//    def configParams = "--b7a.config.file=$project.projectDir/tests/resources/datafiles/ballerina.toml";
//    configParams += " --b7a.config.secret=$project.projectDir/tests/resources/secret.txt";

    doLast {
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat test " +
                        "--code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams} && " +
                        "exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal test " +
                        "--code-coverage --includes=* ${groupParams} ${disableGroups} ${debugParams}"
            }
        }
    }
}

task ballerinaBuild {
    inputs.dir file(project.projectDir)

    def testParams = "--skip-tests"
    gradle.taskGraph.whenReady { graph ->
        if (graph.hasTask(':auth-ballerina:build') || graph.hasTask(':auth-ballerina:publish')) {
            ballerinaTest.enabled = false
        }
        if (graph.hasTask(':auth-ballerina:test')) {
            testParams = "--code-coverage --includes=*"
        }
    }

    doLast {
        // Build and populate caches
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$balJavaDebugParam $distributionBinPath/bal.bat build " +
                        "$testParams ${debugParams} && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$balJavaDebugParam $distributionBinPath/bal build $testParams ${debugParams}"
            }
        }
        copy {
            from file("$project.projectDir/target/bala")
            into file("$artifactCacheParent/bala/${packageOrg}/${packageName}/${tomlVersion}")
        }
        copy {
            from file("$project.projectDir/target/cache")
            exclude '**/*-testable.jar'
            exclude '**/tests_cache/'
            into file("$artifactCacheParent/cache/")
        }

        // Publish to central
        if (!project.version.endsWith('-SNAPSHOT') && ballerinaCentralAccessToken != null &&
                project.hasProperty("publishToCentral")) {
            println("Publishing to the ballerina central..")
            exec {
                workingDir project.projectDir
                environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "$distributionBinPath/bal.bat push && exit %%ERRORLEVEL%%"
                } else {
                    commandLine 'sh', '-c', "$distributionBinPath/bal push"
                }
            }
        }

        // Doc creation and packing
        exec {
            workingDir project.projectDir
            environment "JAVA_OPTS", "-DBALLERINA_DEV_COMPILE_BALLERINA_ORG=true"
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "$distributionBinPath/bal.bat doc && exit %%ERRORLEVEL%%"
            } else {
                commandLine 'sh', '-c', "$distributionBinPath/bal doc"
            }
        }
        copy {
            from file("$project.projectDir/target/apidocs/${packageName}")
            into file("$project.projectDir/build/docs_parent/docs/${packageName}")
        }
    }

    outputs.dir artifactCacheParent
    outputs.dir artifactBallerinaDocs
    outputs.dir artifactLibParent
}

task createArtifactZip(type: Zip) {
    destinationDirectory = file("$buildDir/distributions")
    from ballerinaBuild
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact source: createArtifactZip, extension: 'zip'
            artifact source: artifactCodeCoverageReport, classifier: 'jacoco'
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/ballerina-platform/module-ballerina-auth")
            credentials {
                username = System.getenv("packageUser")
                password = System.getenv("packagePAT")
            }
        }
    }
}

task startLdapServer() {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "docker ps --filter name=openldap-server"
            } else {
                commandLine 'sh', '-c', "docker ps --filter name=openldap-server"
            }
            standardOutput = stdOut
        }
        if (!stdOut.toString().contains("openldap-server")) {
            println "Starting LDAP server."
            copy {
                from file("$project.projectDir/tests/resources/openldap")
                into file("/tmp")
            }
            exec {
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "docker run --rm -d -p 389:389 --name openldap-server " +
                            "--env LDAP_ORGANISATION=\"AVIX\" " +
                            "--env LDAP_DOMAIN=\"avix.lk\" " +
                            "--env LDAP_ADMIN_PASSWORD=\"avix123\" " +
                            "--env LDAP_BASE_DN=\"dc=avix,dc=lk\" " +
                            "--volume /tmp/bootstrap.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/bootstrap.ldif osixia/openldap:1.3.0 " +
                            "--copy-service"
                } else {
                    commandLine 'sh', '-c', "docker run --rm -d -p 389:389 --name openldap-server " +
                            "--env LDAP_ORGANISATION=\"AVIX\" " +
                            "--env LDAP_DOMAIN=\"avix.lk\" " +
                            "--env LDAP_ADMIN_PASSWORD=\"avix123\" " +
                            "--env LDAP_BASE_DN=\"dc=avix,dc=lk\" " +
                            "--volume /tmp/bootstrap.ldif:/container/service/slapd/assets/config/bootstrap/ldif/custom/bootstrap.ldif osixia/openldap:1.3.0 " +
                            "--copy-service"
                }
                standardOutput = stdOut
            }
            println stdOut.toString()
            println "Waiting 15s until the LDAP server get initiated."
            sleep(15 * 1000)
        } else {
            println "LDAP server is already started."
        }
    }
}

task stopLdapServer() {
    doLast {
        def stdOut = new ByteArrayOutputStream()
        exec {
            if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                commandLine 'cmd', '/c', "docker ps --filter name=openldap-server"
            } else {
                commandLine 'sh', '-c', "docker ps --filter name=openldap-server"
            }
            standardOutput = stdOut
        }
        if (stdOut.toString().contains("openldap-server")) {
            println "Stopping LDAP server."
            exec {
                if (Os.isFamily(Os.FAMILY_WINDOWS)) {
                    commandLine 'cmd', '/c', "docker stop openldap-server"
                } else {
                    commandLine 'sh', '-c', "docker stop openldap-server"
                }
                standardOutput = stdOut
            }
            println stdOut.toString()
            println "Waiting 5s until the LDAP server get stopped."
            sleep(5 * 1000)
        } else {
            println "LDAP server is not started."
        }
    }
}

unpackStdLibs.dependsOn unpackJballerinaTools
copyStdlibs.dependsOn unpackStdLibs
updateTomlVersions.dependsOn copyStdlibs

ballerinaTest.finalizedBy revertTomlFile
ballerinaTest.finalizedBy stopLdapServer
ballerinaTest.dependsOn startLdapServer
ballerinaTest.dependsOn initializeVariables
ballerinaTest.dependsOn updateTomlVersions
ballerinaTest.dependsOn ":auth-native:build"
test.dependsOn ballerinaTest

ballerinaBuild.dependsOn test
ballerinaBuild.finalizedBy revertTomlFile
ballerinaBuild.finalizedBy stopLdapServer
ballerinaBuild.dependsOn startLdapServer
ballerinaBuild.dependsOn initializeVariables
ballerinaBuild.dependsOn updateTomlVersions
ballerinaBuild.dependsOn ":auth-native:build"
build.dependsOn ballerinaBuild
